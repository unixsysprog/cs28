Design Document for {{ library }}
-----------------------------------------------------------
Code by: William Gottschalk
Date: {{ date }}
History: {{ history }}
-----------------------------------------------------------

Purpose:
This program is a single version game of pong. A ball moves and bounces
off of the paddle. The ball continues in increase it's speed on each
successful rally. The user has 3 "lives" after which the game is over.

The user can control the paddle using the "j" (up) and "k" (down) keys.
Vim users will feel right at home playing this game.

Ouline:
I took an "object oriented" approach (as much as c allows it). Since there
is only 1 ball, 1 paddle, and 1 court, it made sense to treat each of these
objects as a singleton and expose methods for updating the state in the header
files.

At the start of the game, the ball, paddle, and court are all initialized
and ball sets a signal to begin moving. The ball move function also updates
the game clock (which is located in the court.c).

On each iteration of the ball_move function, the ball's location is checked
to see if there's a collision with the walls or the paddle. If there is a
collision with the walls the ball's direction is update. If the ball collides
with the paddle, then the position is updated with a random speed increase.

If a ball leaves the court, then a message is printed to the screen to start
a new round. The program blocks on user input until the new round begins.

At any time, the user can press the q button to quit the program.

Layering:
keys:
    * -> function call
    - -> function body pseudocode

* main
    * set_up
        * court_init
            - sets values on the court and court_timer structs
            * calls draw_court_edges
            * calls draw_court_score
        * paddle_init
            - sets the initial values on the paddle
            - draws the paddle
        * ball_init 
            - sets the initial values on the ball struct and sets signal for ball_move
            * ball_move
                * update_timer
                - updates the balls position
                * bounce_or_lose
                    - checks to see if the ball hits the walls or paddle
                    * paddle_contact
                        - returns true if ball is in contact with the paddle
                    - updates ball direction (and speed if paddle)if true
                - if ball is outside court, then the round is over
                * court_round_over
                    - prints "try again" or "game over"
                    - decrements the number of balls left
                    - reinitializes the paddle and ball if there's still balls left

        - loops waiting on user input, if 'j' is pressed, paddle_move(down) is
        called and if 'k' is pressed, paddle_move(up) is called.
        if 'q' is pressed then the game exits

    * wrap_up
        - cleans up the timer and the screen


File Structure:
    alarmlib.c - timers for a high resolution clock
    alarmlib.h - exposes settime and millisleep functions

    ball.c     - contains data and movement logic related to the ball
    ball.h     - defines structs for ball and exposes ball_init method
    
    court.c    - contains the data and drawing logic for the court and
                 drawing logic when a ball leaves the court
    court.h    - defines court and court_timer structs and exposes the
                 court_init, court_round_over and update_timer functions

    paddle.c   - defines data and logic for moving and drawing the paddle
    paddle.h   - defines the struct for the paddle and exposes paddle_init,
                 paddle_move, and paddle_contact functions

    main.c     - instantiates the curses library, initializes all of the game 
                 objects and listens for user input to move the paddle
